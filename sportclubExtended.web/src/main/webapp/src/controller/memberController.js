/* ========================================================================
 * Copyright 2014 monitor
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 monitor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/
define(['controller/_memberController','delegate/memberDelegate'], function() {
    App.Controller.MemberController = App.Controller._MemberController.extend({
        language: function(){
            alert('Usted está viendo la versión en ESPAÑOL de esta página');
        },
        postInit: function(options) {
            var self = this;
            this.listEdadTemplate = _.template($('#memberEdadList').html());
            this.listEdadModelClass = options.listModelClass;
        },
        _renderEdad: function() {
            var self = this;
            this.$el.slideUp("fast", function() {
 
                self.$el.html(self.listEdadTemplate({members: self.memberEdadModelList.models}));
                self.$el.slideDown("fast");
            });
        },
        memberEdad: function(params) {
            if (params) {
                var data = params.data;
            }
            if (App.Utils.eventExists(this.componentId + '-' + 'instead-member-list')) {
                Backbone.trigger(this.componentId + '-' + 'instead-member-list', {view: this, data: data});
            } else {
                Backbone.trigger(this.componentId + '-' + 'pre-member-list', {view: this, data: data});
                var self = this;
                if (!this.memberModelList) {
                    this.memberModelList = new this.listModelClass();
                }
                this.memberModelList.fetch({
                    data: data,
                    success: function() {
                        var elementos = self.memberModelList.models;
                        self.memberEdadModelList = new App.Model.MemberEdadList;
                        _.each(elementos, function(d) {
                            //Se hace el cálculo del nuevo campo
                            var actual = new Date();
                            var nacido = d.attributes.birthDate.split("/)");
                            var edad = actual.getFullYear()-nacido[2];
                            if(actual.getMonth()===nacido[1]){
                                if(actual.getDay() < nacido[0]){
                                    edad -= 1;
                                }
                            }
                            else if(actual.getMonth()+1 < nacido[1]){
                                edad -= 1;
                            }
                            var model = new App.Model.MemberEdadModel({name: d.attributes.name, age: edad});
                            self.memberEdadModelList.models.push(model);
                        });
                        //Se invoca la función de renderizado para que muestre los resultados en la nueva lista.
                        self._renderEdad(params);
                        Backbone.trigger(self.componentId + '-' + 'post-member-list', {view: self});
                    },
                    error: function(mode, error) {
                        Backbone.trigger(self.componentId + '-' + 'error', {event: 'member-list', view: self, error: error});
                    }
                });
            }
        }
    });
    return App.Controller.MemberController;
}); 